package io.github.malczuuu.problem4j.spring.web.processor;

import io.github.malczuuu.problem4j.core.Problem;
import io.github.malczuuu.problem4j.spring.web.context.ProblemContext;

/**
 * Defines a contract for post-processing {@link Problem} instances before they are returned in an
 * HTTP response.
 *
 * <p>Implementations of this interface can modify, enrich, or normalize {@code Problem} objects
 * generated by the framework or application code. Typical use cases include:
 *
 * <ul>
 *   <li>Overriding standard fields such as {@code type} or {@code instance}
 *   <li>Injecting tracing or diagnostic information (e.g., a trace identifier)
 *   <li>Applying consistent formatting or metadata across all problems
 * </ul>
 *
 * <p>The interface is intentionally minimal to allow flexible extension and composition of
 * post-processing behavior.
 */
public interface ProblemPostProcessor {

  /**
   * Processes the given {@link Problem} before it is returned to the client.
   *
   * @param context the {@link ProblemContext} providing request-scoped data, such as tracing
   *     information
   * @param problem the {@link Problem} instance to process
   * @return a new or modified {@link Problem} to be returned to the client; may be the same
   *     instance if no changes are applied
   */
  Problem process(ProblemContext context, Problem problem);
}
